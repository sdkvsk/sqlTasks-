Лабораторна 11

1. Опис предметної області автоматизації
a) Користувачі та їх вимоги до створюваної автоматизованої системи:
•	Адміністрація університету:
•	Вимоги: Управління студентами та викладачами, планування навчального процесу, управління фінансами, отримання звітності.
•	Викладачі:
•	Вимоги: Доступ до розкладу, введення оцінок, управління курсами, комунікація зі студентами.
•	Студенти:
•	Вимоги: Доступ до розкладу занять, оцінок, навчальних матеріалів, можливість реєстрації на курси, комунікація з викладачами.
•	Адміністратори системи:
•	Вимоги: Управління користувачами, забезпечення безпеки даних, підтримка та адміністрування системи.
b) Документи, що циркулюють в предметній області:
•	Розклад занять
•	Відомості успішності
•	Навчальні плани
•	Заяви на вступ
•	Звіти про успішність
•	Фінансові документи
c) Правила за якими вони формуються:
•	Розклад занять: Формується на основі навчальних планів та наявності викладачів.
•	Відомості успішності: Заповнюються викладачами після проведення занять та екзаменів.
•	Навчальні плани: Створюються адміністрацією на початку навчального року.
•	Заяви на вступ: Подаються абітурієнтами під час вступної кампанії.
•	Звіти про успішність: Формуються на основі відомостей успішності.
•	Фінансові документи: Включають рахунки на оплату навчання, стипендії, інші фінансові операції.
d) Обмеження на інформацію, що повинна зберігатись в БД:
•	Конфіденційність: Особисті дані студентів та викладачів повинні бути захищені.
•	Цілісність: Дані повинні бути точними та своєчасно оновлюватись.
•	Доступність: Дані повинні бути доступними тільки для авторизованих користувачів.
2. Словник БД
•	Студент (Student)
•	id (INT, PK)
•	ім'я (VARCHAR)
•	прізвище (VARCHAR)
•	дата народження (DATE)
•	адреса (VARCHAR)
•	телефон (VARCHAR)
•	email (VARCHAR)
•	Викладач (Teacher)
•	id (INT, PK)
•	ім'я (VARCHAR)
•	прізвище (VARCHAR)
•	кафедра (VARCHAR)
•	телефон (VARCHAR)
•	email (VARCHAR)
•	Курс (Course)
•	id (INT, PK)
•	назва (VARCHAR)
•	опис (TEXT)
•	кредит (INT)
•	Розклад (Schedule)
•	id (INT, PK)
•	курс_id (INT, FK)
•	викладач_id (INT, FK)
•	дата (DATE)
•	час (TIME)
•	Оцінка (Grade)
•	id (INT, PK)
•	студент_id (INT, FK)
•	курс_id (INT, FK)
•	оцінка (DECIMAL)
•	дата (DATE)
3. Визначення сутностей предметної області, їх атрибути
•	Студент: id, ім'я, прізвище, дата народження, адреса, телефон, email
•	Викладач: id, ім'я, прізвище, кафедра, телефон, email
•	Курс: id, назва, опис, кредит
•	Розклад: id, курс_id, викладач_id, дата, час
•	Оцінка: id, студент_id, курс_id, оцінка, дата
4. Зв'язки між сутностями предметної області
•	Один студент може бути зареєстрований на багато курсів (Студент - Курс: багато-до-багато).
•	Один викладач може вести багато курсів (Викладач - Курс: один-до-багато).
•	Один курс може мати багато оцінок (Курс - Оцінка: один-до-багато).
•	Один викладач може мати багато записів у розкладі (Викладач - Розклад: один-до-багато).
•	Один курс може мати багато записів у розкладі (Курс - Розклад: один-до-багато).
Інфологічна модель
5. Побудова таблиць опису та зв’язків між ними. Запити
SQL код створення таблиць:
CREATE TABLE Student (
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    birth_date DATE,
    address VARCHAR(100),
    phone VARCHAR(15),
    email VARCHAR(50)
);

CREATE TABLE Teacher (
    id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(50),
    phone VARCHAR(15),
    email VARCHAR(50)
);

CREATE TABLE Course (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100),
    description TEXT,
    credit INT
);

CREATE TABLE Schedule (
    id INT PRIMARY KEY AUTO_INCREMENT,
    course_id INT,
    teacher_id INT,
    date DATE,
    time TIME,
    FOREIGN KEY (course_id) REFERENCES Course(id),
    FOREIGN KEY (teacher_id) REFERENCES Teacher(id)
);

CREATE TABLE Grade (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT,
    course_id INT,
    grade DECIMAL(3, 2),
    date DATE,
    FOREIGN KEY (student_id) REFERENCES Student(id),
    FOREIGN KEY (course_id) REFERENCES Course(id)
);

Приклад запитів:
Отримати список всіх студентів:

SELECT * FROM Student;
Отримати розклад занять для конкретного курсу:
SELECT * FROM Schedule WHERE course_id = 1;
Отримати всі оцінки студента:
SELECT * FROM Grade WHERE student_id = 1;
Отримати всі курси, що веде конкретний викладач:
SELECT * FROM Course 
WHERE id IN (SELECT course_id FROM Schedule WHERE teacher_id = 1);
Отримати середню оцінку по курсу:
SELECT AVG(grade) FROM Grade WHERE course_id = 1;
